<?php
/**
 * Created by PhpStorm.
 * User: ldk
 * Date: 2016/7/16
 * Time: 15:00
 */
ob_end_clean(); // 清除之前的缓冲内容，这是必需的，如果之前的 buffer 不为空的话，里面可能有http头或者其它内容，导致后面的内容不能及时的输出
header("Connection: close"); // 告诉浏览器，连接关闭了，这样浏览器就不用等待服务器的响应
header("HTTP/1.1 200 OK"); //可以发送200状态码，以这些请求是成功的，要不然可能浏览器会重试，特别是有代理的情况下

ob_start();#开始当前代码缓冲
echo "running,,,,.";
// 下面输出http的一些头信息
$size=ob_get_length();
header("Content-Length: $size");
ob_end_flush(); // 输出当前缓冲
flush(); // 输出PHP缓冲

// 休眠PHP，也就是当前PHP代码的执行停止，1秒钟后PHP被唤醒，
// PHP唤醒后，继续执行下面的代码，但这个时候上面代码的结果已经输出浏览器了，
// 也就是浏览器从HTTP头中知道了服务端关闭了连接，浏览器将不在等待服务器的响应，
// 反应给客户的就是页面不会显示处于加载状态中，换句话说用户可以关掉当前页面，或者关掉浏览器，
// PHP唤醒后继续执行下面的代码，这也就实现了PHP后台执行的效果，
// 休眠的作用只是让php先把前面的输出作完，不要急于马上执行下面的代码，休息一下而已，也就是说下面的代码
// 执行的时候前面的输出应该到达浏览器了
sleep(1);
echo '这里的输出用户看不到，后台运行的';

//下面代码的任何输出都不会输出给浏览器，因为http连接已经关了，
//所以下面的代码的执行属于后台运行的
ignore_user_abort(true); // 后台运行，这个只是运行浏览器关闭，并不是直接就中止返回200状态。
set_time_limit(0); // 取消脚本运行时间的超时上限

// 从这里开始做你想做的事

$i = 10 ;
for(;$i>=1;$i--){

    file_put_contents('./task.txt',date('Y-m-d H:i:s',time()),FILE_APPEND);
}